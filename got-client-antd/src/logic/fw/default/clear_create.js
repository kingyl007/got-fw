import {Modal, Divider, Icon, message} from 'antd';
import * as got from '../../got';

import moment from 'moment';
import 'moment/locale/zh-cn';
moment.locale('zh-cn');
const confirm = Modal.confirm;
/**
 * 当操作在列表中显示时，通过此方法构建界面元素
 * @param {*} view 画面实例
 * @param {*} actionId 操作Id
 * @param {*} record 待操作记录，对于列表来说就是对应的行
 * @param {*} recordIndex 待操作记录索引
 */
export function layout(view, actionId, record, recordIndex) {
  this.view = view;
  this.action = view.getLayout().actionArgs[actionId];
  return(
    <span key={this.action.fw_index} onClick={(event) => this.logic(view, actionId, record, recordIndex, event)}>
      <a href="javascript:;"><Icon type={this.action.icon} />{this.action.label} </a>
    </span>
  )
}

function randomVIN(num) {
  var range = "0123456789abcdefghjklmnprstuvwxyzABCDEFGHJKLMNPRSTUVWXYZ";
  var charToNum = {'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'H':8,'J':1,'K':2,'L':3,'M':4,'N':5,'P':7,'R':9,'S':2,'T':3,'U':4,'V':5,'W':6,'X':7,'Y':8,'Z':9};
  var factor = [8,7,6,5,4,3,2,10, 0,9,8,7,6,5,4,3,2];
  var vin = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
  for (var i = 0; i < vin.length; ++i) {
    vin[i] = range.substr(parseInt(num + Math.random()*1000) % range.length, 1).toUpperCase();
  }
  console.info(vin);
  var sum = 0;
  vin.map((bit, index)=> sum += factor[index]*(charToNum[bit]?charToNum[bit]:bit));
  console.info('sum',sum);
  var check = sum % 11;
  if (check == 10) {
    check = 'X';
  }
  vin[8] = check;
  return vin.join('');
}

function randomID(num) {
  var city={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江 ",31:"上海",32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北 ",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏 ",61:"陕西",62:"甘肃",63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外 "};
  var id = "";
  var cityArr = Object.keys(city);
  var cityCode = cityArr[num % cityArr.length];
  id += cityCode;
  id += String(10000 + num % 10000).substring(1);
  id += (1800 + num % 300);
  id += String(101 + num % 12).substring(1);
  id += String(101 + num % 31).substring(1);
  id += String(1000 + num % 1000).substring(1);
  var code = id.split('');
  //∑(ai×Wi)(mod 11)
  //加权因子
  var factor = [ 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 ];
  //校验位
  var parity = [ 1, 0, 'X', 9, 8, 7, 6, 5, 4, 3, 2 ];
  var sum = 0;
  var ai = 0;
  var wi = 0;
  for (var i = 0; i < 17; i++)
  {
      ai = code[i];
      wi = factor[i];
      sum += ai * wi;
  }
  var last = parity[sum % 11];
  id += last;
  return id;
}

function radomMobile(num) {
  var validNum = [3,4,5,7,8];
  var mobile = "";
  mobile += "1";
  mobile += validNum[num % validNum.length];
  while (mobile.length < 11) {
    mobile += num;
  }
  return mobile.substring(0,11);
}
/**
 * 操作实际执行的逻辑
 * @param {*} view 画面实例
 * @param {*} actionId 操作Id
 * @param {*} record 待操作记录，对于列表来说就是对应的行
 * @param {*} recordIndex 待操作记录索引
 * @param {*} event 原始界面事件
 */
export function logic(view, actionId, record, recordIndex, event) {
  this.view = view;
  this.action = view.getLayout().actionArgs[actionId];
  this.record = record;
  this.recordIndex = recordIndex;
  this.event = event;
  console.info('event', event.ctrlKey);
  // if (event.ctrlKey) {
  //   const FIRST_NAME = ["赵","钱","孙","李","周","吴","郑","王","冯","陈","褚","卫","蒋","沈","韩","杨","朱","秦","尤","许","何","吕","施","张","孔","曹","严","华","金","魏","陶","姜","戚","谢","邹","喻","柏","水","窦","章","云","苏","潘","葛","奚","范","彭","郎","鲁","韦","昌","马","苗","凤","花","方","俞","任","袁","柳","酆","鲍","史","唐","费","廉","岑","薛","雷","贺","倪","汤","滕","殷","罗","毕","郝","邬","安","常","乐","于","时","傅","皮","卞","齐","康","伍","余","元","卜","顾","孟","平","黄","和","穆","萧","尹","姚","邵","湛","汪","祁","毛","禹","狄","米","贝","明","臧","计","伏","成","戴","谈","宋","茅","庞","熊","纪","舒","屈","项","祝","董","梁","杜","阮","蓝","闵","席","季","麻","强","贾","路","娄","危","江","童","颜","郭","梅","盛","林","刁","钟","徐","邱","骆","高","夏","蔡","田","樊","胡","凌","霍","虞","万","支","柯","昝","管","卢","莫","经","房","裘","缪","干","解","应","宗","丁","宣","贲","邓","郁","单","杭","洪","包","诸","左","石","崔","吉","钮","龚","程","嵇","邢","滑","裴","陆","荣","翁","荀","羊","於","惠","甄","曲","家","封","芮","羿","储","靳","汲","邴","糜","松","井","段","富","巫","乌","焦","巴","弓","牧","隗","山","谷","车","侯","宓","蓬","全","郗","班","仰","秋","仲","伊","宫","宁","仇","栾","暴","甘","钭","厉","戎","祖","武","符","刘","景","詹","束","龙","叶","幸","司","韶","郜","黎","蓟","薄","印","宿","白","怀","蒲","邰","从","鄂","索","咸","籍","赖","卓","蔺","屠","蒙","池","乔","阴","鬱","胥","能","苍","双","闻","莘","党","翟","谭","贡","劳","逄","姬","申","扶","堵","冉","宰","郦","雍","卻","璩","桑","桂","濮","牛","寿","通","边","扈","燕","冀","郏","浦","尚","农","温","别","庄","晏","柴","瞿","阎","充","慕","连","茹","习","宦","艾","鱼","容","向","古","易","慎","戈","廖","庾","终","暨","居","衡","步","都","耿","满","弘","匡","国","文","寇","广","禄","阙","东","欧","殳","沃","利","蔚","越","夔","隆","师","巩","厍","聂","晁","勾","敖","融","冷","訾","辛","阚","那","简","饶","空","曾","毋","沙","乜","养","鞠","须","丰","巢","关","蒯","相","查","后","荆","红","游","竺","权","逯","盖","益","桓","公","万俟","司马","上官","欧阳","夏侯","诸葛","闻人","东方","赫连","皇甫","尉迟","公羊","澹台","公冶","宗政","濮阳","淳于","单于","太叔","申屠","公孙","仲孙","轩辕","令狐","钟离","宇文","长孙","慕容","鲜于","闾丘","司徒","司空","丌官","司寇","仉督","子车","颛孙","端木","巫马","公西","漆雕","乐正","壤驷","公良","拓跋","夹谷","宰父","谷梁","晋楚","闫法","汝鄢","涂钦","段干","百里","东郭","南门","呼延","归海","羊舌","微生","岳帅","缑亢","况郈","有琴","梁丘","左丘","东门","西门","商牟","佘佴","伯赏","南宫"];
  //   const MALE_NAME = ["安邦","安福","安歌","安国","安和","安康","安澜","安民","安宁","安平","安然","安顺","安翔","安晏","安宜","安怡","安易","安志","昂然","昂雄","宾白","宾鸿","宾实","彬彬","彬炳","彬郁","斌斌","斌蔚","滨海","波光","波鸿","波峻","波涛","博瀚","博超","博达","博厚","博简","博明","博容","博赡","博涉","博实","博涛","博文","博学","博雅","博延","博艺","博易","博裕","博远","才捷","才良","才艺","才英","才哲","才俊","成和","成弘","成化","成济","成礼","成龙","成仁","成双","成天","成文","成业","成益","成荫","成周","承安","承弼","承德","承恩","承福","承基","承教","承平","承嗣","承天","承望","承宣","承颜","承业","承悦","承允","承运","承载","承泽","承志","德本","德海","德厚","德华","德辉","德惠","德容","德润","德寿","德水","德馨","德曜","德业","德义","德庸","德佑","德宇","德元","德运","德泽","德明","飞昂","飞白","飞飙","飞掣","飞尘","飞沉","飞驰","飞光","飞翰","飞航","飞翮","飞鸿","飞虎","飞捷","飞龙","飞鸾","飞鸣","飞鹏","飞扬","飞文","飞翔","飞星","飞翼","飞英","飞宇","飞羽","飞雨","飞语","飞跃","飞章","飞舟","风华","丰茂","丰羽","刚豪","刚洁","刚捷","刚毅","高昂","高岑","高畅","高超","高驰","高达","高澹","高飞","高芬","高峯","高峰","高歌","高格","高寒","高翰","高杰","高洁","高峻","高朗","高丽","高邈","高旻","高明","高爽","高兴","高轩","高雅","高扬","高阳","高义","高谊","高逸","高懿","高原","高远","高韵","高卓","光赫","光华","光辉","光济","光霁","光亮","光临","光明","光启","光熙","光耀","光誉","光远","国安","国兴","国源","冠宇","冠玉","晗昱","晗日","涵畅","涵涤","涵亮","涵忍","涵容","涵润","涵涵","涵煦","涵蓄","涵衍","涵意","涵映","涵育","翰采","翰池","翰飞","翰海","翰翮","翰林","翰墨","翰学","翰音","瀚玥","翰藻","瀚海","瀚漠","昊苍","昊昊","昊空","昊乾","昊穹","昊然","昊然","昊天","昊焱","昊英","浩波","浩博","浩初","浩大","浩宕","浩荡","浩歌","浩广","浩涆","浩瀚","浩浩","浩慨","浩旷","浩阔","浩漫","浩淼","浩渺","浩邈","浩气","浩然","浩穰","浩壤","浩思","浩言","皓轩","和蔼","和安","和璧","和昶","和畅","和风","和歌","和光","和平","和洽","和惬","和顺","和硕","和颂","和泰","和悌","和通","和同","和煦","和雅","和宜","和怡","和玉","和裕","和豫","和悦","和韵","和泽","和正","和志","鹤轩","弘博","弘大","弘方","弘光","弘和","弘厚","弘化","弘济","弘阔","弘亮","弘量","弘深","弘盛","弘图","弘伟","弘文","弘新","弘雅","弘扬","弘业","弘义","弘益","弘毅","弘懿","弘致","弘壮","宏伯","宏博","宏才","宏畅","宏达","宏大","宏放","宏富","宏峻","宏浚","宏恺","宏旷","宏阔","宏朗","宏茂","宏邈","宏儒","宏深","宏胜","宏盛","宏爽","宏硕","宏伟","宏扬","宏义","宏逸","宏毅","宏远","宏壮","鸿宝","鸿波","鸿博","鸿才","鸿彩","鸿畅","鸿畴","鸿达","鸿德","鸿飞","鸿风","鸿福","鸿光","鸿晖","鸿朗","鸿文","鸿熙","鸿羲","鸿禧","鸿信","鸿轩","鸿煊","鸿煊","鸿雪","鸿羽","鸿远","鸿云","鸿运","鸿哲","鸿祯","鸿振","鸿志","鸿卓","华奥","华采","华彩","华灿","华藏","华池","华翰","华皓","华晖","华辉","华茂","华美","华清","华荣","华容","嘉赐","嘉德","嘉福","嘉良","嘉茂","嘉木","嘉慕","嘉纳","嘉年","嘉平","嘉庆","嘉荣","嘉容","嘉瑞","嘉胜","嘉石","嘉实","嘉树","嘉澍","嘉熙","嘉禧","嘉祥","嘉歆","嘉许","嘉勋","嘉言","嘉谊","嘉懿","嘉颖","嘉佑","嘉玉","嘉誉","嘉悦","嘉运","嘉泽","嘉珍","嘉祯","嘉志","嘉致","坚白","坚壁","坚秉","坚成","坚诚","建安","建白","建柏","建本","建弼","建德","建华","建明","建茗","建木","建树","建同","建修","建业","建义","建元","建章","建中","健柏","金鑫","锦程","瑾瑜","晋鹏","经赋","经亘","经国","经略","经纶","经纬","经武","经业","经义","经艺","景澄","景福","景焕","景辉","景辉","景龙","景明","景山","景胜","景铄","景天","景同","景曜","靖琪","君昊","君浩","俊艾","俊拔","俊弼","俊才","俊材","俊驰","俊楚","俊达","俊德","俊发","俊风","俊豪","俊健","俊杰","俊捷","俊郎","俊力","俊良","俊迈","俊茂","俊美","俊民","俊名","俊明","俊楠","俊能","俊人","俊爽","俊悟","俊晤","俊侠","俊贤","俊雄","俊雅","俊彦","俊逸","俊英","俊友","俊语","俊誉","俊远","俊哲","俊喆","俊智","峻熙","季萌","季同","开畅","开诚","开宇","开济","开霁","开朗","凯安","凯唱","凯定","凯风","凯复","凯歌","凯捷","凯凯","凯康","凯乐","凯旋","凯泽","恺歌","恺乐","康安","康伯","康成","康德","康复","康健","康乐","康宁","康平","康胜","康盛","康时","康适","康顺","康泰","康裕","乐安","乐邦","乐成","乐池","乐和","乐家","乐康","乐人","乐容","乐山","乐生","乐圣","乐水","乐天","乐童","乐贤","乐心","乐欣","乐逸","乐意","乐音","乐咏","乐游","乐语","乐悦","乐湛","乐章","乐正","乐志","黎昕","黎明","力夫","力强","力勤","力行","力学","力言","立诚","立果","立人","立辉","立轩","立群","良奥","良弼","良才","良材","良策","良畴","良工","良翰","良吉","良骥","良俊","良骏","良朋","良平","良哲","理群","理全","茂才","茂材","茂德","茂典","茂实","茂学","茂勋","茂彦","敏博","敏才","敏达","敏叡","敏学","敏智","明诚","明达","明德","明辉","明杰","明俊","明朗","明亮","明旭","明煦","明轩","明远","明哲","明喆","明知","明志","明智","明珠","朋兴","朋义","彭勃","彭薄","彭湃","彭彭","彭魄","彭越","彭泽","彭祖","鹏程","鹏池","鹏飞","鹏赋","鹏海","鹏鲸","鹏举","鹏鹍","鹏鲲","鹏涛","鹏天","鹏翼","鹏云","鹏运","濮存","溥心","璞玉","璞瑜","浦和","浦泽","奇略","奇迈","奇胜","奇水","奇思","奇邃","奇伟","奇玮","奇文","奇希","奇逸","奇正","奇志","奇致","祺福","祺然","祺祥","祺瑞","琪睿","庆生","荣轩","锐达","锐锋","锐翰","锐进","锐精","锐立","锐利","锐思","锐逸","锐意","锐藻","锐泽","锐阵","锐志","锐智","睿博","睿才","睿诚","睿慈","睿聪","睿达","睿德","睿范","睿广","睿好","睿明","睿识","睿思","绍辉","绍钧","绍祺","绍元","升荣","圣杰","晟睿","思聪","思淼","思源","思远","思博","斯年","斯伯","泰初","泰和","泰河","泰鸿","泰华","泰宁","泰平","泰清","泰然","天材","天成","天赋","天干","天罡","天工","天翰","天和","天华","天骄","天空","天禄","天路","天瑞","天睿","天逸","天佑","天宇","天元","天韵","天泽","天纵","同方","同甫","同光","同和","同化","同济","巍昂","巍然","巍奕","伟博","伟毅","伟才","伟诚","伟茂","伟懋","伟祺","伟彦","伟晔","伟泽","伟兆","伟志","温纶","温茂","温书","温韦","温文","温瑜","文柏","文昌","文成","文德","文栋","文赋","文光","文翰","文虹","文华","文康","文乐","文林","文敏","文瑞","文山","文石","文星","文轩","文宣","文彦","文曜","文耀","文斌","文彬","文滨","向晨","向笛","向文","向明","向荣","向阳","翔宇","翔飞","项禹","项明","晓博","心水","心思","心远","欣德","欣嘉","欣可","欣然","欣荣","欣怡","欣怿","欣悦","新翰","新霁","新觉","新立","新荣","新知","信鸿","信厚","信鸥","信然","信瑞","兴安","兴邦","兴昌","兴朝","兴德","兴发","兴国","兴怀","兴平","兴庆","兴生","兴思","兴腾","兴旺","兴为","兴文","兴贤","兴修","兴学","兴言","兴业","兴运","星波","星辰","星驰","星光","星海","星汉","星河","星华","星晖","星火","星剑","星津","星阑","星纬","星文","星宇","星雨","星渊","星洲","修诚","修德","修杰","修洁","修谨","修筠","修明","修能","修平","修齐","修然","修为","修伟","修文","修雅","修永","修远","修真","修竹","修贤","旭尧","炫明","学博","学海","学林","学民","学名","学文","学义","学真","雪松","雪峰","雪风","雅昶","雅畅","雅达","雅惠","雅健","雅珺","雅逸","雅懿","雅志","炎彬","阳飙","阳飇","阳冰","阳波","阳伯","阳成","阳德","阳华","阳晖","阳辉","阳嘉","阳平","阳秋","阳荣","阳舒","阳朔","阳文","阳曦","阳夏","阳旭","阳煦","阳炎","阳焱","阳曜","阳羽","阳云","阳泽","阳州","烨赫","烨华","烨磊","烨霖","烨然","烨烁","烨伟","烨烨","烨熠","烨煜","毅然","逸仙","逸明","逸春","宜春","宜民","宜年","宜然","宜人","宜修","意远","意蕴","意致","意智","熠彤","懿轩","英飙","英博","英才","英达","英发","英范","英光","英豪","英华","英杰","英朗","英锐","英睿","英叡","英韶","英卫","英武","英悟","英勋","英彦","英耀","英奕","英逸","英毅","英哲","英喆","英卓","英资","英纵","永怡","永春","永安","永昌","永长","永丰","永福","永嘉","永康","永年","永宁","永寿","永思","永望","永新","永言","永逸","永元","永贞","咏德","咏歌","咏思","咏志","勇男","勇军","勇捷","勇锐","勇毅","宇达","宇航","宇寰","宇文","宇荫","雨伯","雨华","雨石","雨信","雨星","雨泽","玉宸","玉成","玉龙","玉泉","玉山","玉石","玉书","玉树","玉堂","玉轩","玉宇","玉韵","玉泽","煜祺","元白","元德","元化","元基","元嘉","元甲","元驹","元凯","元恺","元魁","元良","元亮","元龙","元明","元青","元思","元纬","元武","元勋","元正","元忠","元洲","远航","苑博","苑杰","越彬","蕴涵","蕴和","蕴藉","展鹏","哲瀚","哲茂","哲圣","哲彦","振海","振国","正诚","正初","正德","正浩","正豪","正平","正奇","正青","正卿","正文","正祥","正信","正雅","正阳","正业","正谊","正真","正志","志诚","志新","志勇","志明","志国","志强","志尚","志专","志文","志行","志学","志业","志义","志用","志泽","致远","智明","智鑫","智勇","智敏","智志","智渊","子安","子晋","子民","子明","子默","子墨","子平","子琪","子石","子实","子真","子濯","子昂","子轩","子瑜","自明","自强","作人","自怡","自珍","曾琪","泽宇","泽语"];
  //   const FEMALE_NAME = ["安安","荌荌","安卉","安娜","安妮","安然","傲冬","傲晴","傲雪","白雪","白云","碧螺","碧菡","碧玉","冰蓝","冰冰","采绿","采文","采萱","初雪","春华","春雪","丹丹","丹彤","丹红","冬雪","芳芳","方方","芳菲","芳华","芳馨","芳泽","芳馥","芳懿","芳茵","芳蕙","芳春","芳洲","芳蕤","芳润","芳荃","芳林","芳苓","芳洁","芳蔼","飞双","飞雪","飞烟","飞燕","飞英","谷雪","古兰","古韵","古香","歌阑","歌吹","歌韵","歌飞","格菲","葛菲","戈雅","格格","含烟","含玉","涵菡","晗蕾","涵韵","晗玥","寒凝","寒香","寒雁","和悌","和美","和怡","和雅","和璧","和玉","和暖","红叶","红豆","红雪","红英","红云","红旭","红香","红艳","红螺","虹雨","虹彩","虹英","虹颖","虹影","怀玉","慧心","慧颖","慧雅","慧智","慧美","慧捷","慧丽","慧月","慧云","慧俊","慧秀","慧巧","慧英","慧艳","浩岚","家美","家欣","家馨","佳悦","嘉怡","嘉宝","嘉惠","嘉悦","嘉歆","嘉美","嘉云","嘉玉","嘉丽","嘉淑","嘉怡","嘉懿","洁玉","晶滢","晶辉","静曼","静涵","静逸","静姝","静娴","静婉","静雅","静慧","静云","静安","静秀","娟秀","娟妍","娟丽","娟巧","兰若","兰蕙","兰梦","兰泽","兰芝","兰英","兰娜","岚霏","岚翠","岚彩","乐安","乐心","乐悦","乐容","乐英","丽泽","丽华","丽雅","丽芳","丽佳","丽姿","丽珠","丽容","丽文","灵秀","灵韵","灵慧","灵卉","灵萱","玲玲","玲珑","凌波","凌春","凌霜","凌雪","莉莉","曼蔓","曼冬","曼青","曼容","曼文","曼妮","曼云","曼衍","曼丽","曼语","曼辞","曼珠","曼音","曼吟","美丽","美华","米琪","梦凡","梦菲","梦菡","梦露","梦琪","梦秋","梦竹","妙晴","玛丽","茉莉","麦冬","念文","凝雪","娜兰","妮娜","纳兰","沛珊","沛文","萍韵","萍雅","绮玉","清雅","清逸","清华","清秋","清馨","清心","清韵","清芬","清涵","清妍","清昶","清怡","清婉","清晖","清绮","清漪","清卓","清懿","清润","清俊","清宁","清淑","清舒","清霁","清佳","清妙","庆雪","晴岚","晴雪","晴虹","晴波","晴霞","晴丽","晴照","晴画","蓉蓉","融雪","如风","如云","若云","若兰","诗兰","诗蕾","诗蕊","书萱","淑兰","舒兰","舒云","舒方","淑华","思美","思云","施诗","天韵","天心","天蓝","听云","甜恬","恬美","恬然","恬静","婷美","婷秀","宛白","琬凝","婉然","婉仪","婉静","婉慧","婉丽","婉容","婉秀","婉清","婉娜","雯丽","雯华","文茵","文静","文君","文漪","文丽","文心","文惠","文敏","玟丽","玟玉","问筠","问萍","惜文","惜雪","惜玉","夏菡","夏兰","夏岚","夏青","夏彤","夏旋","霞绮","霞飞","霞辉","霞姝","霞月","霞英","霞雰","霞影","霞赩","霞文","湘云","香馨","向卉","向彤","向雪","晓燕","晓莉","晓凡","晓兰","晓曼","晓霜","笑寒","心语","心香","心愫","心宜","心怡","心诺","心远","新梅","欣美","欣然","欣悦","欣欣","欣嘉","欣荣","欣愉","欣可","欣畅","欣跃","欣合","欣笑","欣艳","新蕾","新雪","新月","馨香","馨逸","馨荣","馨兰","馨欣","秀丽","秀美","秀逸","秀雅","秀华","秀兰","秀颖","秀隽","秀曼","秀媛","秀筠","秀慧","秀媚","秀婉","秀艾","秀敏","秀英","秀越","秀竹","秀妮","秀洁","秀艳","璇玑","璇子","璇珠","雪枫","雪卉","雪曼","雪萍","雪晴","寻春","寻绿","寻芳","雅宁","雅琴","雅容","雅柔","雅蕊","雅彤","雅韵","雅娴","雅懿","雅静","雅洁","雅丽","雅惠","雅韶","雅素","雅爱","雅美","雅云","雅媚","雅艳","雅可","艳丽","艳芳","艳娇","艳蕊","艳卉","依白","依然","依波","依秋","依美","依云","逸云","逸美","逸馨","倚云","怡然","怡宁","以晴","以蕊","以彤","以轩","忆梅","忆秋","忆彤","忆雪","英华","英秀","英媛","盈秀","迎秋","莹玉","莹华","莹琇","颖慧","颖馨","颖然","颖秀","颖初","映波","映寒","映秋","幼仪","幼怡","幼安","雨筠","雨竹","语燕","语心","语诗","悦欣","悦可","悦欣","悦心","悦爱","云梦","云水","云霞","云露","云英","云岚","云逸","云臻","云韶","云飞","云泽","云蔚","云亭","蕴秀","蕴美","韵诗"];
  //   let rand = parseInt(Math.random() * 1000000);
  //   // const now = moment();
  //   const sex = parseInt(Math.random() * 1000) % 2;

  //   const formData = {
  //     "BY_DATE": {
  //       "value": moment().format('YYYY-MM-DD')
  //     },
  //     "FORCE_INS": {
  //       "value": parseInt(Math.random() * 1000) % 2
  //     },
  //     "IS_ENABLE": {
  //       "value": "1"
  //     },
  //     "SEX": {
  //       "value": sex,
  //     },
  //     "ADDRESS": {
  //       "value": ""
  //     },
  //     "STEAL_INS": {
  //       "value": parseInt(Math.random() * 1000) % 2
  //     },
  //     "MEMBER_SOURCE": {
  //       "value": rand %2 + 1
  //     },
  //     "ADDRESS_SELECT": {
  //       "value": ""
  //     },
  //     "IS_DEL": {
  //       "value": "0"
  //     },
  //     "BIZ_INS": {
  //       "value": parseInt(Math.random() * 1000) % 2
  //     },
  //     "NAME": {
  //       "value": FIRST_NAME[parseInt(Math.random() * 10000) % FIRST_NAME.length] + (sex==0?MALE_NAME[parseInt(Math.random() * 10000) % MALE_NAME.length]:FEMALE_NAME[parseInt(Math.random() * 10000) % FEMALE_NAME.length])
  //     },
  //     "ID_NO": {
  //       "value": randomID(rand)
  //     },
  //     "MOBILE_NO": {
  //       "value": radomMobile(rand)
  //     },
  //     "DRIVE_YEARS": {
  //       "value": rand % 10 + 1
  //     },
  //     "FAMILIY_INCOMING": {
  //       "value": rand % 100000
  //     },
  //     "OCCUPATION": {
  //       "value": "职务" + rand
  //     },
  //     "CAR_MODEL": {
  //       "value": null//"宝马;系列1;2018"
  //     },
  //     "VIN": {
  //       "value": randomVIN(rand)
  //     },
  //     "ENGINE_ID": {
  //       "value": "ENG" + rand
  //     },
  //     "PRICE": {
  //       "value": rand
  //     },
  //     "VEHICLE_NUM": {
  //       "value": "沪" + rand
  //     },
  //     "REG_DATE": {
  //       "value": moment().subtract((rand%10)+1,'days').format('YYYY-MM-DD')
  //     },
  //     "GPS_DEVICE_NO": {
  //       "value": ""
  //     },
  //     "COLOR": {
  //       "value": "COLOR" + rand
  //     },
  //     "BIZ_INS_DUE": {
  //       "value": moment().add(1,'years').format('YYYY-MM-DD')
  //     },
  //     "BIZ_INS_DAMEGE": {
  //       "value": 600 + parseInt(Math.random() * 1000),
  //     },
  //     "BIZ_INS_THIRD": {
  //       "value": 700 + parseInt(Math.random() * 1000),
  //     },
  //     "BIZ_INS_OTHER": {
  //       "value": 300 + parseInt(Math.random() * 1000),
  //     },
  //     "FORCE_INS_DUE": {
  //       "value": moment().add(1,'years').format('YYYY-MM-DD')
  //     },
  //     "FORCE_INS_AMOUNT": {
  //       "value": 800 + parseInt(Math.random() * 1000)
  //     },
  //     "STEAL_INS_AMOUNT": {
  //       "value": 1200 + parseInt(Math.random() * 1000)
  //     },
  //     "FIRST_BENEFIT": {
  //       "value": "受益人" + rand
  //     },
  //     "CURRENT_MILE": {
  //       "value": rand
  //     },
  //     "NEXT_MAINTAIN_MILE": {
  //       "value": rand + 5000
  //     },
  //     "NEXT_MAINTAIN_DATE": {
  //       "value": moment().add(6,'months').format('YYYY-MM-DD')
  //     }
  //   };
  //   const manualValues = {}; 
  //  //  manualValues['ADDRESS_SELECT'] = ['山东省','青岛市','市南区'];
  //   this.view.setState({formData, manualValues});
  //   return;
  // }
  confirm({
    title: '确认清空?',
    okText: '确认请空',
    okType: 'danger',
    cancelText: '不清空',
    onOk: ()=>this.view.refresh(),
    onCancel() {
      console.log('Cancel');
    },
  });
}


export function handleOk(e) {
  const form = this.dialog.state.form;
  form.validateFieldsAndScroll((error, values) => {
    if (!error) {
      console.info('values', values, this.dialog.props.fwParam.oldData);
      this.dialog.props.saveEditData({fwCoord:this.dialog.getFwCoord(), fwParam:{...this.dialog.state.fwParam}, callback:(result)=> {
        if (result.success) {
          if (!got.isEmpty(result.errorMsg)) {
            message.info(result.errorMsg, 10);
          } else {
            message.success('保存成功');
          }
          this.dialog.getGridData({});
          this.handleCancel(e);
        } else {
          if (result.validResultMap) {
            const se = {};
            Object.keys(result.validResultMap).map(key=> {se[key] = {value:values[key], errors:[new Error(result.validResultMap[key])]}});
            form.setFields(se);
          }
          if (!got.isEmpty(result.errorMsg)) {
              message.error(result.errorMsg, 10);
          }
        }
      }});
    } else {
      console.info('error', error);
    }
  });
}

export function handleCancel(e) {
  // console.info('fwParam', this.dialog.props.fwParam);
  const ds = this.dialog.state.dialogs;
  delete ds[this.id];
  this.dialog.setState({dialogs: ds});
}